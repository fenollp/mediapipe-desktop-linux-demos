# syntax=docker.io/docker/dockerfile:1@sha256:42399d4635eddd7a9b8a24be879d2f9a930d0ed040a61324cfdf59ef1357b3b2

FROM --platform=$BUILDPLATFORM docker.io/library/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300 AS alpine
# TODO: switch to newer ubuntu
FROM --platform=$BUILDPLATFORM docker.io/library/ubuntu:18.04@sha256:c2aa13782650aa7ade424b12008128b60034c795f25456e8eb552d0a0f447cad AS ubuntu

FROM alpine AS mediapipe-src
WORKDIR /w
ARG MEDIAPIPE_COMMIT
RUN set -ux \
 && apk add --no-cache git \
 && git init \
 && git remote add origin https://github.com/google/mediapipe \
 && git fetch --depth 1 origin $MEDIAPIPE_COMMIT \
 && git checkout FETCH_HEAD \
 && rm -rf .git

FROM ubuntu AS base
WORKDIR /mediapipe
ENV DEBIAN_FRONTEND=noninteractive
RUN set -ux \
 && apt update \
 && apt install -y --no-install-recommends \
        build-essential \
        gcc-8 g++-8 \
        ca-certificates \
        curl \
        ffmpeg \
        git \
        wget \
        unzip \
        python3-dev \
        python3-opencv \
        python3-pip \
        libopencv-core-dev \
        libopencv-highgui-dev \
        libopencv-imgproc-dev \
        libopencv-video-dev \
        libopencv-calib3d-dev \
        libopencv-features2d-dev \
        software-properties-common \
 && add-apt-repository -y ppa:openjdk-r/ppa \
 && apt update \
 && apt install -y openjdk-8-jdk
RUN set -ux \
 && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8 \
 && update-alternatives --install /usr/bin/python python /usr/bin/python3 1
RUN set -ux \
 && pip3 install --upgrade setuptools \
 && pip3 install wheel \
 && pip3 install future \
 && pip3 install six==1.14.0
ARG BAZEL_VERSION=4.2.1
RUN set -ux \
 && mkdir /bazel \
 && wget --no-check-certificate -O /bazel/installer.sh "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh" \
 && wget --no-check-certificate -O /bazel/LICENSE.txt "https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE" \
 && chmod +x /bazel/installer.sh \
 && /bazel/installer.sh \
 && rm /bazel/installer.sh
#full static
# https://github.com/bazelbuild/bazel/issues/8672#issuecomment-505064783
# https://github.com/bazelbuild/bazel/issues/8672#issuecomment-507634776
# https://blog.jessfraz.com/post/top-10-favorite-ldflags/
#  --unresolved-symbols=ignore-all
RUN set -ux \
 && mkdir /x \
 && echo ' --platform_suffix=-cpu' >/bazelflags
### RUN set -ux \
###  #    # Fix for OpenCV v4
###  # && sed -i 's%#include <opencv2/optflow.hpp>%#include <opencv2/video/tracking.hpp>%' mediapipe/framework/port/opencv_video_inc.h \
###     # Use OpenCV v4
###  && sed -i 's%# "include/%"include/%g' third_party/opencv_linux.BUILD

FROM base AS base-cpu
RUN \
  --mount=from=mediapipe-src,source=/w,target=/mediapipe,rw \
  --mount=type=cache,target=/root/.cache/bazel \
    set -ux \
 && bazel build $(cat /bazelflags) \
                -c opt \
                --define MEDIAPIPE_DISABLE_GPU=1 \
                mediapipe/examples/desktop/hello_world:hello_world \
 && cp ./bazel-bin/mediapipe/examples/desktop/hello_world/hello_world /x/hello_world_cpu
RUN \
  --mount=from=mediapipe-src,source=/w,target=/mediapipe,rw \
  --mount=type=cache,target=/root/.cache/bazel \
    set -ux \
 && bazel build $(cat /bazelflags) \
                -c opt \
                --define MEDIAPIPE_DISABLE_GPU=1 \
                //mediapipe/calculators/tflite:tflite_inference_calculator
RUN \
  --mount=from=mediapipe-src,source=/w,target=/mediapipe,rw \
  --mount=type=cache,target=/root/.cache/bazel \
    set -ux \
 && bazel build $(cat /bazelflags) \
                -c opt \
                --define MEDIAPIPE_DISABLE_GPU=1 \
                //mediapipe/calculators/tflite:tflite_converter_calculator
RUN \
  --mount=from=mediapipe-src,source=/w,target=/mediapipe,rw \
  --mount=type=cache,target=/root/.cache/bazel \
    set -ux \
 && bazel build $(cat /bazelflags) \
                -c opt \
                --define MEDIAPIPE_DISABLE_GPU=1 \
                //mediapipe/calculators/tflite:tflite_tensors_to_detections_calculator

FROM scratch AS hello_world_cpu
COPY --from=base-cpu /x/hello_world_cpu /


FROM base AS base-gpu
RUN set -ux \
 && apt install -y --no-install-recommends \
        mesa-common-dev \
        libegl1-mesa-dev \
        libgles2-mesa-dev \
        mesa-utils \
 && echo ' --platform_suffix=-gpu' >/bazelflags
RUN \
  --mount=from=mediapipe-src,source=/w,target=/mediapipe,rw \
  --mount=type=cache,target=/root/.cache/bazel \
    set -ux \
 && bazel build $(cat /bazelflags) \
                -c opt \
                --copt -DMESA_EGL_NO_X11_HEADERS --copt -DEGL_NO_X11 \
                mediapipe/examples/desktop/hello_world:hello_world \
 && cp ./bazel-bin/mediapipe/examples/desktop/hello_world/hello_world /x/hello_world_gpu
RUN \
  --mount=from=mediapipe-src,source=/w,target=/mediapipe,rw \
  --mount=type=cache,target=/root/.cache/bazel \
    set -ux \
 && bazel build $(cat /bazelflags) \
                -c opt \
                --copt -DMESA_EGL_NO_X11_HEADERS --copt -DEGL_NO_X11 \
                //mediapipe/calculators/tflite:tflite_inference_calculator
RUN \
  --mount=from=mediapipe-src,source=/w,target=/mediapipe,rw \
  --mount=type=cache,target=/root/.cache/bazel \
    set -ux \
 && bazel build $(cat /bazelflags) \
                -c opt \
                --copt -DMESA_EGL_NO_X11_HEADERS --copt -DEGL_NO_X11 \
                //mediapipe/calculators/tflite:tflite_converter_calculator
RUN \
  --mount=from=mediapipe-src,source=/w,target=/mediapipe,rw \
  --mount=type=cache,target=/root/.cache/bazel \
    set -ux \
 && bazel build $(cat /bazelflags) \
                -c opt \
                --copt -DMESA_EGL_NO_X11_HEADERS --copt -DEGL_NO_X11 \
                //mediapipe/calculators/tflite:tflite_tensors_to_detections_calculator

FROM scratch AS hello_world_gpu
COPY --from=base-gpu /x/hello_world_gpu /
